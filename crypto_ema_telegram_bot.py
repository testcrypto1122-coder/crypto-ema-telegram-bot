import aiohttp
import asyncio
import pandas as pd
from datetime import datetime, timezone
from flask import Flask
import os

# === C·∫•u h√¨nh Telegram ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "8264206004:AAH2zvVURgKLv9hZd-ZKTrB7xcZsaKZCjd0")
CHAT_ID = os.getenv("CHAT_ID", "8282016712")

# === C·∫•u h√¨nh EMA ===
INTERVAL = "5m"
EMA_SHORT = 9
EMA_LONG = 21
LIMIT_COINS = 100  # Gi·ªõi h·∫°n s·ªë coin ƒë·ªÉ qu√©t

app = Flask(__name__)

# === G·ª≠i tin nh·∫Øn Telegram async ===
async def send_telegram_message(session, message: str):
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è Thi·∫øu BOT_TOKEN ho·∫∑c CHAT_ID")
        return
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
        async with session.post(url, json=payload, timeout=10) as resp:
            await resp.text()
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i Telegram: {e}")

# === L·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance async ===
async def get_binance_data(session, symbol: str, interval=INTERVAL, limit=100):
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        async with session.get(url, timeout=10) as resp:
            data = await resp.json()
        df = pd.DataFrame(data, columns=[
            "time", "open", "high", "low", "close", "volume", "close_time",
            "quote_asset_volume", "num_trades", "tb_base_vol", "tb_quote_vol", "ignore"
        ])
        df["close"] = df["close"].astype(float)
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y d·ªØ li·ªáu {symbol}: {e}")
        return None

# === Ki·ªÉm tra giao c·∫Øt EMA ===
async def check_ema_crossover(session, symbol: str):
    df = await get_binance_data(session, symbol)
    if df is None or len(df) < EMA_LONG:
        return None

    df["ema_short"] = df["close"].ewm(span=EMA_SHORT).mean()
    df["ema_long"] = df["close"].ewm(span=EMA_LONG).mean()

    prev_short, prev_long = df["ema_short"].iloc[-2], df["ema_long"].iloc[-2]
    last_short, last_long = df["ema_short"].iloc[-1], df["ema_long"].iloc[-1]

    # T√≠n hi·ªáu MUA
    if prev_short < prev_long and last_short > last_long:
        msg = f"üü¢ {symbol} ‚Äî EMA9 c·∫Øt l√™n EMA21 ‚Üí **T√≠n hi·ªáu MUA**"
        print(msg)
        await send_telegram_message(session, msg)
        return "BUY"

    # T√≠n hi·ªáu B√ÅN
    elif prev_short > prev_long and last_short < last_long:
        msg = f"üî¥ {symbol} ‚Äî EMA9 c·∫Øt xu·ªëng EMA21 ‚Üí **T√≠n hi·ªáu B√ÅN**"
        print(msg)
        await send_telegram_message(session, msg)
        return "SELL"

    return None

# === H√†m ch√≠nh qu√©t coin async ===
async def main_loop():
    async with aiohttp.ClientSession() as session:
        await send_telegram_message(session, "üöÄ Bot EMA 9/21 ƒë√£ kh·ªüi ƒë·ªông v√† b·∫Øt ƒë·∫ßu qu√©t coin!")

        while True:
            try:
                # L·∫•y danh s√°ch coin
                async with session.get("https://api.binance.com/api/v3/exchangeInfo") as resp:
                    exchange_info = await resp.json()
                all_coins = [
                    s['symbol'] for s in exchange_info['symbols']
                    if s['quoteAsset'] == 'USDT' and not any(x in s['symbol'] for x in ['UP', 'DOWN', 'BULL', 'BEAR'])
                ][:LIMIT_COINS]

                print(f"\nüîç Qu√©t {len(all_coins)} coin... ({datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')})")

                tasks = [check_ema_crossover(session, symbol) for symbol in all_coins]
                results = await asyncio.gather(*tasks)

                buy_signals = results.count("BUY")
                sell_signals = results.count("SELL")

                summary = f"üìä **T·ªïng k·∫øt v√≤ng qu√©t**\n" \
                          f"ü™ô T·ªïng coin qu√©t: {len(all_coins)}\n" \
                          f"üü¢ MUA: {buy_signals} | üî¥ B√ÅN: {sell_signals}\n" \
                          f"‚è∞ {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}"
                print(summary)
                await send_telegram_message(session, summary)

                # Th√¥ng b√°o "qu√©t xong"
                await send_telegram_message(session, "‚úÖ ƒê√£ qu√©t xong v√≤ng EMA!")

                print("‚è± Ngh·ªâ 60 gi√¢y tr∆∞·ªõc v√≤ng qu√©t ti·∫øp theo...\n")
                await asyncio.sleep(60)

            except Exception as e:
                print(f"‚ùå L·ªói v√≤ng qu√©t: {e}")
                await asyncio.sleep(30)

# === Flask gi·ªØ bot ch·∫°y tr√™n Render ===
@app.route('/')
def home():
    return "‚úÖ EMA Bot ƒëang ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh!"

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(main_loop())
    app.run(host='0.0.0.0', port=10000)
