import requests
import pandas as pd
import time
from datetime import datetime
from flask import Flask

# ============ TELEGRAM CONFIG ============
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
CHAT_ID = "YOUR_CHAT_ID"

# ============ FLASK KEEPALIVE ============
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ EMA Bot ƒëang ch·∫°y tr√™n Render!", 200

# ============ H√ÄM G·ª¨I TELEGRAM ============
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        print("L·ªói g·ª≠i Telegram:", e)

# ============ L·∫§Y DANH S√ÅCH C·∫∂P USDT ============
def get_all_usdt_symbols():
    url = "https://api.binance.com/api/v3/exchangeInfo"
    try:
        data = requests.get(url, timeout=10).json()
        symbols = [s["symbol"] for s in data.get("symbols", []) if s["symbol"].endswith("USDT")]
        return symbols
    except Exception as e:
        print("L·ªói khi l·∫•y danh s√°ch coin:", e)
        return ["BTCUSDT", "ETHUSDT"]

# ============ L·∫§Y D·ªÆ LI·ªÜU GI√Å & EMA ============
def get_ema_signal(symbol):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval=5m&limit=100"
    try:
        data = requests.get(url, timeout=10).json()
        closes = [float(x[4]) for x in data]
        df = pd.DataFrame(closes, columns=["close"])
        df["ema9"] = df["close"].ewm(span=9, adjust=False).mean()
        df["ema21"] = df["close"].ewm(span=21, adjust=False).mean()

        if df["ema9"].iloc[-2] < df["ema21"].iloc[-2] and df["ema9"].iloc[-1] > df["ema21"].iloc[-1]:
            return f"üîº {symbol} t√≠n hi·ªáu MUA (EMA9 c·∫Øt l√™n EMA21)"
        elif df["ema9"].iloc[-2] > df["ema21"].iloc[-2] and df["ema9"].iloc[-1] < df["ema21"].iloc[-1]:
            return f"üîΩ {symbol} t√≠n hi·ªáu B√ÅN (EMA9 c·∫Øt xu·ªëng EMA21)"
        return None
    except Exception:
        return None

# ============ CH·∫†Y BOT ============
def main():
    send_telegram_message("üöÄ Bot EMA 9/21 ƒë√£ kh·ªüi ƒë·ªông!")
    symbols = get_all_usdt_symbols()
    send_telegram_message(f"üìä ƒêang theo d√µi {len(symbols)} c·∫∑p coin USDT.")

    while True:
        for sym in symbols[:50]:  # Gi·ªõi h·∫°n 50 coin/l∆∞·ª£t ƒë·ªÉ tr√°nh rate limit
            signal = get_ema_signal(sym)
            if signal:
                send_telegram_message(signal)
            time.sleep(1)
        print("üïí", datetime.now(), "ƒê√£ qu√©t xong 1 v√≤ng.")
        time.sleep(60)

if __name__ == "__main__":
    import threading
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000)).start()
    main()
