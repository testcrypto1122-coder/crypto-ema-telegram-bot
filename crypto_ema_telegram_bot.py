import requests
import pandas as pd
import time
from datetime import datetime, timezone
from flask import Flask
import threading
import os

# === C·∫•u h√¨nh Telegram ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not BOT_TOKEN or not CHAT_ID:
    print("‚ö†Ô∏è Vui l√≤ng ƒë·∫∑t BOT_TOKEN v√† CHAT_ID trong bi·∫øn m√¥i tr∆∞·ªùng Render.")
    exit(1)

# === C·∫•u h√¨nh EMA ===
INTERVAL = "5m"
EMA_SHORT = 9
EMA_LONG = 21
LIMIT_COINS = 100  # Gi·ªõi h·∫°n s·ªë coin ƒë·ªÉ qu√©t

app = Flask(__name__)

# === G·ª≠i tin nh·∫Øn Telegram ===
def send_telegram_message(message: str):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": message}
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code != 200:
            print(f"‚ùå L·ªói g·ª≠i Telegram: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i Telegram: {e}")

# === L·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance ===
def get_binance_data(symbol: str, interval=INTERVAL, limit=100):
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        data = requests.get(url, timeout=10).json()
        df = pd.DataFrame(data, columns=[
            "time", "open", "high", "low", "close", "volume", "close_time",
            "quote_asset_volume", "num_trades", "tb_base_vol", "tb_quote_vol", "ignore"
        ])
        df["close"] = df["close"].astype(float)
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y d·ªØ li·ªáu {symbol}: {e}")
        return None

# === Ki·ªÉm tra giao c·∫Øt EMA ===
def check_ema_crossover(symbol: str):
    df = get_binance_data(symbol)
    if df is None or len(df) < EMA_LONG:
        return None

    df["ema_short"] = df["close"].ewm(span=EMA_SHORT).mean()
    df["ema_long"] = df["close"].ewm(span=EMA_LONG).mean()

    prev_short, prev_long = df["ema_short"].iloc[-2], df["ema_long"].iloc[-2]
    last_short, last_long = df["ema_short"].iloc[-1], df["ema_long"].iloc[-1]

    if prev_short < prev_long and last_short > last_long:
        msg = f"üü¢ {symbol} ‚Äî EMA9 c·∫Øt l√™n EMA21 ‚Üí T√≠n hi·ªáu MUA"
        print(msg)
        send_telegram_message(msg)
        return "BUY"

    elif prev_short > prev_long and last_short < last_long:
        msg = f"üî¥ {symbol} ‚Äî EMA9 c·∫Øt xu·ªëng EMA21 ‚Üí T√≠n hi·ªáu B√ÅN"
        print(msg)
        send_telegram_message(msg)
        return "SELL"

    return None

# === H√†m ch√≠nh qu√©t coin ===
def main():
    send_telegram_message("üöÄ Bot EMA 9/21 ƒë√£ kh·ªüi ƒë·ªông v√† b·∫Øt ƒë·∫ßu qu√©t coin!")

    while True:
        try:
            # L·∫•y danh s√°ch coin USDT, lo·∫°i b·ªè coin r√°c
            exchange_info = requests.get("https://api.binance.com/api/v3/exchangeInfo").json()
            all_coins = [
                s['symbol'] for s in exchange_info['symbols']
                if s['quoteAsset'] == 'USDT' and not any(x in s['symbol'] for x in ['UP', 'DOWN', 'BULL', 'BEAR'])
            ][:LIMIT_COINS]

            print(f"\nüîç Qu√©t {len(all_coins)} coin... ({datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')})")

            buy_signals, sell_signals = 0, 0

            for symbol in all_coins:
                result = check_ema_crossover(symbol)
                if result == "BUY":
                    buy_signals += 1
                elif result == "SELL":
                    sell_signals += 1
                time.sleep(0.5)

            summary = f"üìä T·ªïng k·∫øt v√≤ng qu√©t:\n" \
                      f"ü™ô Coin qu√©t: {len(all_coins)}\n" \
                      f"üü¢ MUA: {buy_signals} | üî¥ B√ÅN: {sell_signals}\n" \
                      f"‚è∞ {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}"
            print(summary)
            send_telegram_message(summary)
            send_telegram_message("‚úÖ ƒê√£ qu√©t xong v√≤ng n√†y, bot s·∫Ω ngh·ªâ 60 gi√¢y...")

            time.sleep(60)

        except Exception as e:
            print(f"‚ùå L·ªói v√≤ng qu√©t: {e}")
            time.sleep(30)

# === Flask gi·ªØ bot ch·∫°y tr√™n Render ===
@app.route('/')
def home():
    return "‚úÖ EMA Bot ƒëang ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh!"

if __name__ == '__main__':
    threading.Thread(target=main, daemon=True).start()
    app.run(host='0.0.0.0', port=10000)
