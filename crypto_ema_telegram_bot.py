import os
import time
import requests
import pandas as pd
from flask import Flask
from datetime import datetime

# ==============================
# ‚öôÔ∏è C·∫•u h√¨nh c∆° b·∫£n
# ==============================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

API_URL = "https://api.binance.com/api/v3/klines"
INTERVAL = "5m"  # khung th·ªùi gian qu√©t EMA
VOLUME_THRESHOLD = 500_000  # b·ªè qua coin r√°c (volume < 500K USDT)

# Flask server ƒë·ªÉ Render gi·ªØ app online
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ EMA Auto Scanner Bot ƒëang ho·∫°t ƒë·ªông..."

# ==============================
# üîπ G·ª≠i tin nh·∫Øn Telegram
# ==============================
def send_telegram_message(message: str):
    if not TELEGRAM_BOT_TOKEN or not CHAT_ID:
        print("‚ùå Thi·∫øu TELEGRAM_BOT_TOKEN ho·∫∑c CHAT_ID.")
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": message}
        res = requests.post(url, json=payload)
        if res.status_code != 200:
            print("‚ö†Ô∏è Telegram error:", res.text)
    except Exception as e:
        print("‚ùå Telegram exception:", e)

# ==============================
# üîπ L·∫•y d·ªØ li·ªáu coin
# ==============================
def get_binance_data(symbol: str, interval=INTERVAL, limit=100):
    try:
        url = f"{API_URL}?symbol={symbol}&interval={interval}&limit={limit}"
        res = requests.get(url)
        data = res.json()
        if not isinstance(data, list):
            return None
        df = pd.DataFrame(data, columns=[
            "Open time", "Open", "High", "Low", "Close", "Volume",
            "Close time", "Quote asset volume", "Number of trades",
            "Taker buy base asset volume", "Taker buy quote asset volume", "Ignore"
        ])
        df["Close"] = df["Close"].astype(float)
        df["Quote asset volume"] = df["Quote asset volume"].astype(float)
        return df
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu {symbol}: {e}")
        return None

# ==============================
# üîπ T√≠nh EMA
# ==============================
def calculate_ema(df):
    df["EMA9"] = df["Close"].ewm(span=9, adjust=False).mean()
    df["EMA21"] = df["Close"].ewm(span=21, adjust=False).mean()
    return df

# ==============================
# üîπ Ki·ªÉm tra t√≠n hi·ªáu EMA
# ==============================
def check_ema_signal(df):
    if df is None or len(df) < 2:
        return None
    prev = df.iloc[-2]
    last = df.iloc[-1]
    if prev["EMA9"] < prev["EMA21"] and last["EMA9"] > last["EMA21"]:
        return "BUY"
    elif prev["EMA9"] > prev["EMA21"] and last["EMA9"] < last["EMA21"]:
        return "SELL"
    else:
        return None

# ==============================
# üîπ L·∫•y danh s√°ch coin c√≥ volume cao
# ==============================
def get_top_coins(limit=30):
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        res = requests.get(url).json()
        df = pd.DataFrame(res)
        df["quoteVolume"] = df["quoteVolume"].astype(float)
        df = df[df["symbol"].str.endswith("USDT")]
        df = df[df["quoteVolume"] > VOLUME_THRESHOLD]
        df = df.sort_values("quoteVolume", ascending=False).head(limit)
        coins = df["symbol"].tolist()
        return coins
    except Exception as e:
        print("‚ùå L·ªói l·∫•y danh s√°ch coin:", e)
        return ["BTCUSDT", "ETHUSDT"]

# ==============================
# üîπ V√≤ng qu√©t ch√≠nh
# ==============================
def scan_coins():
    coins = get_top_coins()
    print(f"\nüîç Qu√©t {len(coins)} coin c√≥ volume cao... ({datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')})")

    for symbol in coins:
        df = get_binance_data(symbol)
        if df is None:
            continue

        total_volume = df["Quote asset volume"].iloc[-1]
        if total_volume < VOLUME_THRESHOLD:
            print(f"üí§ B·ªè qua {symbol} (volume th·∫•p)")
            continue

        df = calculate_ema(df)
        signal = check_ema_signal(df)
        price = df["Close"].iloc[-1]

        if signal == "BUY":
            msg = f"üöÄ [{symbol}] MUA: EMA9 c·∫Øt l√™n EMA21 t·∫°i {price:.2f} USDT"
            send_telegram_message(msg)
            print(msg)
        elif signal == "SELL":
            msg = f"‚ö†Ô∏è [{symbol}] B√ÅN: EMA9 c·∫Øt xu·ªëng EMA21 t·∫°i {price:.2f} USDT"
            send_telegram_message(msg)
            print(msg)
        else:
            print(f"‚è≥ {symbol}: Kh√¥ng c√≥ t√≠n hi·ªáu m·ªõi.")

# ==============================
# üîπ MAIN LOOP
# ==============================
def main():
    send_telegram_message("ü§ñ Bot EMA 9/21 Auto Scanner ƒë√£ kh·ªüi ƒë·ªông!")
    while True:
        try:
            scan_coins()
            print("‚è∏ Ngh·ªâ 60 gi√¢y...\n")
            time.sleep(60)  # ngh·ªâ 1 ph√∫t r·ªìi qu√©t l·∫°i
        except Exception as e:
            print("‚ùå L·ªói v√≤ng l·∫∑p ch√≠nh:", e)
            time.sleep(60)

# ==============================
# üîπ Flask ƒë·ªÉ gi·ªØ Render online
# ==============================
if __name__ == "__main__":
    import threading
    # Ch·∫°y bot trong lu·ªìng ri√™ng
    threading.Thread(target=main, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
